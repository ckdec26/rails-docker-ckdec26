CI/CDを導入し、デプロイを自動化しよう

1. GitHubにソースコードを共有
    同じコードを参照
    コードレビュー

2. CI = 継続的インテグレーション
    ビルド・テストを自動実行

3. CD = 継続的デリバリー
    自動デプロイ

ツール「CircleCI」

（GitHub運用の流れ）
1. ブランチ作成（ローカル）
2. コード修正
3. コミット
4. プッシュ (GitHubへ)
5. プルリクエスト
    コードレビュー等を依頼
6. マージ（mainブランチへ取り込み）
7. ブランチ切り替え
8. プル

Gitコマンド
・Gitリポジトリの作成（最初だけ）
    > git init
・GitHubのURLを登録（最初だけ）
    > git remote add origin <URL>
・ブランチを作成して切り替える
    > git switch -c <ブランチ名>
・変更内容をステージングへ追加
    > git add .
・変更内容をコミット
    > git commit -m "メッセージ"
・GitHubにプッシュ
    > git push origin <ブランチ名>
・ブランチを作成して切り替えるs
    > git switch <ブランチ名>
・GitHubの変更内容を取り込む
    > git pull origin <ブランチ名>
・変更したファイルを確認
    > git status
・変更したファイル内容を確認
    > git diff

全体の流れ
1. GitHub
    ・GitHub上でリポジトリ作成
        Web上で作成
    ・Gitでコードを管理
        > git init
    ・.gitignoreを追加
        管理外のファイルを記述しておく
    ・コミット、プッシュ

2. CI
    ・テストコードを記載
        1. ~/Develop/rails_docker/src/test/controllers/users_controller_test.rbを変更
            * 「assert」を「false」にする事でわざとエラーとする。
        2. 以下を実行して、エラーとなるのを確認
            > docker-compose up -d
            > docker-compose exec web bundle exec rake test
    ・CircleCIに登録
        1. 
    ・プロジェクトを登録
    ・configを設定
    ・環境変数を設定
    ・GitHubにプッシュ
    ・テストを修正

3. CD
    ・configを修正
    ・環境変数を設定
    ・Viewファイルを修正
    ・GitHubにプッシュ
    ・マージ、デプロイ
    



